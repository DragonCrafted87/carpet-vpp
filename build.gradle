plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
}
version = project.mod_version
group = project.maven_group
base {
    archivesName = project.archives_base_name
}
repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
    }
maven {
name = "TerraformersMC"
url = "https://maven.terraformersmc.com/"
}
maven {
name = "Ladysnake Libs"
url = 'https://maven.ladysnake.org/releases'
}
    maven {
        name = "Sleeping Town"
        url = "https://repo.sleeping.town"
        content {
            includeGroup "com.unascribed"
        }
    }
}
loom {
    splitEnvironmentSourceSets()
    mods {
        "template-mod" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
    accessWidenerPath = file("src/main/resources/vpp.accesswidener")
}
fabricApi {
    configureDataGeneration()
}
dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "dev.emi:trinkets:${trinkets_version}"
    include "dev.emi:trinkets:${trinkets_version}"
    modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"
    modLocalRuntime "dev.emi:emi-fabric:${emi_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    // Add jsr305 to resolve missing Nullable annotation during source remapping
    modCompileOnly "com.google.code.findbugs:jsr305:3.0.2"
}
processResources {
    inputs.property("version", project.version)
    inputs.property("fabric_version", project.fabric_version.split("\\+")[0])
    inputs.property("minecraft_version", project.minecraft_version)
    inputs.property("trinkets_version", project.trinkets_version)
    inputs.property("emi_version", project.emi_version.split("\\+")[0])
    filesMatching("fabric.mod.json") {
        expand(
            "version": project.version,
            "fabric_version": project.fabric_version.split("\\+")[0],
            "minecraft_version": project.minecraft_version,
            "trinkets_version": project.trinkets_version,
            "emi_version": project.emi_version.split("\\+")[0]
        )
    }
}
tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
    it.options.encoding = 'UTF-8'
}
java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}
// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
task setupRunServer {
    doLast {
        def runDir = file('run')
        runDir.mkdirs()
        // EULA
        def eulaFile = file("${runDir}/eula.txt")
        if (!eulaFile.exists()) {
            eulaFile.text = "eula=true\n"
        }
        // server.properties
        def propsFile = file("${runDir}/server.properties")
        Properties props = new Properties()
        if (propsFile.exists()) {
            props.load(propsFile.newReader())
        } else {
            propsFile.createNewFile()
        }
        props.setProperty("enable-command-block", "true")
        props.store(propsFile.newWriter(), null)
    }
}
runServer.dependsOn setupRunServer
